'.source.rust':
  'allow lint attribute':
    'prefix': 'allow'
    'body': '#[allow(${1:lint})]'
  'allow!':
    'prefix': 'allow!'
    'body': '#![allow(${1:lint})]'
  'Function Arguments':
   'prefix': 'argument'
   'body': 'i ${1:a}: ${2:T}${3:, arg}'
  "assert!(…)":
    'prefix': "assert"
    'body': "assert!(${1});"
  "assert_eq!(…, …)":
    'prefix': "assert_eq"
    'body': "assert_eq!(${1}, ${2});"
  'attribute':
   'prefix': 'attr'
   'body': '"#[..]
  #[${1:inline}]"'
  'Bench function':
   'prefix': "bench"
   'body': '''
    #[bench]
    fn ${1:name}(b: &mut test::Bencher) {
      ${2:b.iter(|| ${3:/* benchmark code */})}
    }
  '''
  "Case clause of pattern match":
   'prefix': 'case'
   'body': '${1:_} => ${2:expression}'
  '|| anonymous function':
   'prefix': 'closure || inline'
   'body': ' i ${1:move }|${2}| { $3 }'
  '|} anonymous function':
   'prefix': 'closure |} block'
   'body': '''
   ${1:move }|${2}| {
   $3
  }
  '''
  "cfg!":
   "prefix": "cfg!"
   "body": "cfg!(${1})"
  'configuration flags':
   'prefix': 'cfg'
   'body': 'b #[cfg(${1:target_os = "linux"})]'
  "cfg_attr":
   "prefix": "cfg_attr",
   "body": "#[cfg_attr(${1}, ${2})]"
  "column":
   "prefix": "column",
   "body": "column!()"
  "concat":
   "prefix": "concat",
   "body": "concat!(${1})"
  "concat_idents":
   "prefix": "concat_idents",
   "body": "concat_idents!(${1})"
  "const …: … = …;":
   'prefix': "const"
   'body': "const ${1:CONST}: ${2:Type} = ${4:init};"
  'Define create meta attributes':
   'prefix': "crate"
   'body': '''// Crate name
	  #![crate_name = "${1:crate_name}"]
	  // Additional metadata attributes
	  #![desc = "${2:Descrption.}"]
	  #![license = "${3:BSD}"]
	  #![comment = "${4:Comment.}"]
	  // Specify the output type
	  #![crate_type = "${5:lib}"]
   '''
  "debug_assert":
   "prefix": "debug_assert",
   "body": "debug_assert!(${1});"
  "debug_assert_eq":
   "prefix": "debug_assert_eq",
   "body": "debug_assert_eq!(${1}, ${2});"
  'deny':
    'prefix': 'deny'
    'body': '#[deny(${1:lint})]'
  'deny!':
    'prefix': 'deny!'
    'body': '#![deny(${1:lint})]'
  'derive':
    'prefix': 'derive'
    'body': '#[derive(${1:Trait})]'
  'Drop trait implementation (destructor)':
   'prefix': 'drop'
   'body': '''
   impl Drop for ${1:Name} {
    fn drop(&mut self) {
    			${0}
    		}
    	}
   '''
  "else { … }":
    'prefix': "else"
    'body': '''
     else {
       ${1:unimplemented!();}
     }
   '''
  "else if":
   'prefix': 'else-if'
   'body': '''
   else if ${1} {
   		${0}
   	}
   '''
  'enum definition':
    'prefix': 'enum'
    'body': '''
      enum ${1:TypeName} {
      \t$2
      }
    '''
  "env":
   "prefix": "env",
   "body": "env!(\"${1}\")"
  "Err(…)":
    'prefix': "Err"
    'body': "Err(${1})"
  "extern crate …;":
   'prefix': "extern-crate"
   'body': "extern crate ${1:name};"
  "extern \"C\" fn …(…) { … }":
    'prefix': "extern-fn"
    'body': '''
     extern "C" fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {
       ${5:// add code here}
     }
   '''
  "extern \"C\" { … }":
    'prefix': "extern-mod"
    'body': '''
     extern "C" {
       ${2:// add code here}
     }
   '''
  'ecl':
   'prefix': 'ecl'
   'body':	'#[macro_use] extern crate log;'
  'feature attribute':
   'prefix': 'feat'
   'body': '''
   feature attribute
    #![feature(${1:plugin})]:
    '''
  "file":
   "prefix": "file",
   "body": "file!()"
  "format!(…)":
   'prefix': "format"
   'body': 'format!("${1}"${2/..*/, /}${2});'
  "format_args":
   "prefix": "format_args",
   "body": "format_args!(\"${1:\\{${2::?}\\}}\")"
  'fn':
    'prefix': 'function'
    'body': '''
      fn ${1:function_name}($2) {
      \t${3:unimplemented!()}
      }
    '''
  'function argument return type.':
    'prefix': 'fnr'
    'body': '''
      fn ${1:function_name}($2) -> ${3:TypeName} {
      \t${4:unimplemented!()}
      }
    '''
  'for .. in ..':
    'prefix': 'for'
    'body': '''
      for ${1:variable} in ${2:iterator} {
      \t$3
      }
    '''
  "if let … = … { … }":
    'prefix': "if-let"
    'body': '''
     if let ${1:Some(pat)} = ${2:expr} {
       ${2:unimplemented!();}
     }
   '''
  'if':
    'prefix': 'if'
    'body': '''
      if ${1:expression} {
      \t$2
      }
    '''
  'if-else loop':
   'prefix': 'if-else'
   'body': '''
   if ${1} {
  	${2}
  	} else {
  		${0}
  	}
    '''
  'impl':
    'prefix': 'impl'
    'body': '''
      impl ${1:TypeName} {
      \t$2
      }
    '''
  "include":
   "prefix": "include",
   "body": "include!(\"${1}\");"
  "include_bytes":
   "prefix": "include_bytes",
   "body": "include_bytes!(\"${1}\")"
  "include_str":
   "prefix": "include_str",
   "body": "include_str!(\"${1}\")"
  "Struct/Trait implementation":
   'prefix': 'impl-trait'
   'body': 'impl ${1:Type/Trait}${2: for ${3:Type}} { ${0} }'
  'explicit type annotation':
   'prefix': 'lett'
   'body': 'let ${1}: ${2}  = ${3};'
  'let variable declaration':
    'prefix': 'let'
    'body': 'let ${1:variable} = ${2:value};'
  'type annotation':
   'prefix': 'lettm'
   'body': 'let mut ${1}: ${2}  = ${3};'
  'type inference':
   'prefix': 'letm'
   'body': 'let mut ${1}  = ${2};'
  "line":
   "prefix": "line",
   "body": "line!()"
  'loop':
   'prefix': 'loop'
   'body': '''
    loop {
    \t$1
   }
    '''
  "macro_rules! … { … }":
    'prefix': "macro_rules"
    'body': '''
     macro_rules! ${1:name} {
       (${2}) => (${3})
     }
   '''
  "macro_use":
   "prefix": "macro_use",
   "body":
            "#[macro_use(${1})]"
  'macro':
    'prefix': 'macro'
    'body': '''
      macro_rules! ${1:macro_name} {
      \t($2) => ($3);
      }
    '''
  'Main function':
    'prefix': 'main'
    'body': '''
      fn main() {
      \t${1:unimplemented!()}
      }
    '''
  'match pattern':
    'prefix': 'match'
    'body': '''
      match ${1:expression} {
      \t$2
      }
    '''
  "a Module":
    'prefix': "mod"
    'body': '''
     mod ${1:name} {
       ${2:// add code here}
     }
   '''
  "module_path":
   "prefix": "module_path",
   "body": "module_path!()"
  "Constructor function":
   "prefix": 'new'
   "body": '''
   pub fn new(${2}) -> ${1:Name} {
	   $1 { ${3} }
   }
   '''
  "no_core":
   "prefix": "no_core",
   "body": "#![no_core]"
  "no_std":
   "prefix": "no_std",
   "body": "#![no_std]"

  "Ok(…)":
    'prefix': "Ok"
    'body': "Ok(${1:result})"
  'Option':
   'prefix': 'Option'
   'body': '''
   "Option<T>"
	  Option<${1:i32}>
    '''
  "option_env":
   "prefix": "option_env",
   "body": "option_env!(\"${1}\")"
  "panic!(…)":
    'prefix': "panic"
    'body': "panic!(\"${1:\\{${2::?}\\}}\"${1/([^\\{])*(\\{.*\\})?.*/(?2:, :\\);)/}$3${1/([^\\{])*(\\{.*\\})?.*/(?2:\\);)/}"
  'print single line':
    'prefix': 'print!'
    'body': 'print!("${1:{${2::?}\\}}", ${3});'
  'println! with format param':
    'prefix': 'println!'
    'body': 'println!("${1:{${2::?}\\}}", ${3});'
  'pln':
   'prefix': 'pln'
   'body': 'println!("${1}");'
  'Function definition':
   'prefix': 'pubfn'
   "body": '''
   pub fn ${1:function_name}(${2})${3} {
		${0}
    '''
  "repr":
   "prefix": "repr",
   "body": "#[repr(${1})]"
  "return":
   "prefix": "return",
   "body": "return ${1:expr};"
  "spawn a scoped thread":
   'prefix': 'scoped'
   'body': '''
   thread::scoped(${1:move }|| {
                    ${0}
  	        });
            '''

  "Some(…)":
    'prefix': "Some"
    'body': "Some(${1})"
  "spawn a thread":
   'prefix': 'spawn'
   'body': '''
   thread::spawn(${1:move }|| {
       		${0}
       	});
        '''
  'static':
    'prefix': 'static'
    'body': 'static ${1:CONSTANT}: ${2:TypeName} = ${3:value};'
  "stringify":
   "prefix": "stringify",
   "body": "stringify!(${1})"
  "struct …(…);":
    'prefix': "struct-tuple"
    'body': "struct ${1:Name}(${2:Type});"
  "struct …;":
    'prefix': "struct-unit"
    'body': "struct ${1:Name};"
  'Struct field definition':
    'prefix': 'struct'
    'body': '''
      struct ${1:TypeName} {
      \t$2
      }
    '''
  'Unit test function':
    'prefix': 'test'
    'body': '''
      #[test]
      fn ${1:test_name}() {
      \t${2:unimplemented!()}
      }
    '''
  'Test Module':
    'prefix': 'testmod'
    'body': '''
      #[cfg(test)]
      mod tests {
      \tuse super::*;

      \t#[test]
      \tfn ${1:test_name}() {
      \t\t${2:unimplemented!()}
      \t}
      }
    '''
  "thread_local":
   "prefix": "thread_local",
   "body": "thread_local!(static ${1:STATIC}: ${2:Type} = ${4:init});"
  "A Todo comment":
    'prefix': 'todo'
    'body': '// [TODO]: ${1:Description} - `!v strftime("%Y-%m-%d %I:%M%P")`'
  'trait definition':
    'prefix': 'trait'
    'body': '''
      trait ${1:TypeName} {
      \t$2
      }
    '''
  "try":
   "prefix": "try",
   "body": "try!(${1})"
  'type':
    'prefix': 'type'
    'body': 'type ${1:TypeName} = ${2:TypeName};'
  "unimplemented":
   "prefix": "unimplemented",
   "body": "unimplemented!()"
  "unreachable":
   "prefix": "unreachable",
   "body": "unreachable!(${1})"
  "unsafe":
   "prefix": "unsafe",
   "body": "unsafe ${1:TypeName}"
  "vec":
   "prefix": "vec",
   "body": "vec![${1}]"
  'warn':
    'prefix': 'warn'
    'body': '#[warn(${1:lint})]'
  'warn!':
    'prefix': 'warn!'
    'body': '#![warn(${1:lint})]'
  "while-let":
   "prefix": "whilelet",
   "body": "while let ${1:pat} = ${2:expr} {\n\t$3\n}"
  'while loop':
    'prefix': 'while'
    'body': '''
      while ${1:expression} {
      \t$2
      }
    '''
  "write":
   "prefix": "write",
   "body": "write!(${1}, \"${2:\\{${3::?}\\}}\")"
  "writeln":
   "prefix": "writeln",
   "body": "writeln!(${1}, \"${2:\\{${3::?}\\}}\")"
